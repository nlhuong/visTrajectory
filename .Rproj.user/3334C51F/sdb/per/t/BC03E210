{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the \n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n# \n#    http://shiny.rstudio.com/\n#\n\n# library(coda)\n# library(dplyr)\n# library(ggplot2)\n# library(MCMCglmm)\n# library(plotly)\n# library(princurve)\n# library(reshape2)\n# library(rstan)\n# library(shiny)\n# library(viridis)\n# library(DistatisR)\n# library(plyr)\n# library(reshape2)\n\nsource(\"./helpers.R\")\n\nlapply(c(\"coda\", \"dplyr\", \"ggplot2\", \"MCMCglmm\", \n         \"plotly\", \"princurve\", \"reshape2\", \"rstan\", \"shiny\",\n         \"viridis\", \"DistatisR\", \"plyr\", \"reshape2\"), \n       require, character.only = TRUE)\n\noptions(shiny.maxRequestSize=30*1024^2) \ntheme_set(theme_bw())\n\nmin_row_sum <- 100\nmin_row_prevalence <- 5\nB <- 100\ninit_buds_from <- \"principal_curve\"\npath2stan <- \"../buds.stan\"\n\ncountTable_default_file <- \"../data/frog_processed_counts.csv\"\nsampleData_default_file <- \"../data/frog_sample_data.csv\"\nX0 <- read.csv(countTable_default_file, row.names = 1)\nsampleData0 <- read.csv(sampleData_default_file, row.names = 1)\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n  \n  # Count table\n  X <- reactive({\n    message(\"Load count table...\")\n    inFile <- input$file_countTable\n    if (is.null(inFile)) {\n      X <- X0\n    } else {\n      X <- read.csv(inFile$datapath, row.names = 1)\n    }\n    return(X)\n  })\n  \n  # External attributes of the sample\n  sampleData <- reactive({\n    message(\"Load sample data...\")\n    inFile <- input$file_sampleData \n    if (is.null(inFile)) {\n      sampleData <- sampleData0\n    } else {\n      sampleData <- read.csv(inFile$datapath, row.names = 1)\n    }\n    return(sampleData)\n  })\n  \n  # Covariate used for coloring points\n  sample_covariate <- reactive({\n    if(!(input$covariate %in% colnames(sampleData()))) {\n      message(\"Selected covariate is not in the sample data.\")\n    }\n    req(input$covariate %in% colnames(sampleData()))\n    sample_covariate <- sampleData()[, input$covariate]\n    return(sample_covariate)\n  })\n  \n  # Chosen features indexes\n  chosen_feats <- reactive({\n    if(is.null(input$feat_idx) || input$feat_idx == \"\") {\n      return(NA)\n    }\n    features <- strsplit(input$feat_idx, \",\")[[1]]\n    if (all(features %in% rownames(X()))) {\n      return(features)\n    }\n    idx <- as.numeric(features)\n    idx <- idx[idx %in% 1:nrow(X())]\n    return(idx)\n  })\n  \n  # Chosen sample indexes\n  chosen_samples <- reactive({\n    samples <- strsplit(input$sample_idx, \",\")[[1]]\n    if (all(samples %in% colnames(X()))) {\n      return(samples)\n    }\n    idx <- as.numeric(samples)\n    idx <- idx[idx %in% 1:ncol(X())]\n    return(idx)\n  })\n  \n  # Constant (K) for selecting number of kNN\n  K <- reactive({\n    if(is.null(input$K)) {\n      K <- floor(ncol(X())/10)\n    } else {\n      K <- input$K\n    }\n    return(K)\n  })\n  \n  # Dissimilarity matrix\n  D0 <- reactive({\n    message(\"Computing dissimilarities...\")\n    typeData <- input$data_type\n    if (typeData == \"microbiome\") {\n      D <- jacc_dist(X(), min_row_sum, min_row_prevalence)\n    } else {\n      D <- cor_dist(X(), log_trans = TRUE, scale = TRUE, base = 1e6)\n    }\n    return(D)\n  })\n  \n  \n  # Transformed dissimilarity matrix\n  D <- reactive({\n    D <- D0()\n    if (input$transform_distances) {\n      message(\"Transforming dissimilarities...\")\n      D <- transform_dist(D)\n    }\n    return(D)\n  }) \n  \n  # Fit 1D latent coordinates, tau, with BUDS\n  budsFit <- reactive({\n    req(ncol(X()) == nrow(sampleData()))\n    message(\"Fitting BUDS...\")\n    message(paste0(\"Stan file: \", path2stan))\n    fit <- fit_buds(D(), stan_file = path2stan, \n                    K = K(), init_from = init_buds_from)\n    return(fit$fit_buds)\n  })\n  \n  # Gather tau samples drawn from the posterior\n  tau_df <- reactive({\n    return(get_tau_df(budsFit(), prob = 0.95))\n  })\n  \n  # Plot average distances to kNN along tau interval\n  plot_kNN_dist <- reactive({\n    req(sample_covariate())\n    plt <- plot_kNN_mean_dist(D(), tau_df()$tau, color = sample_covariate(),\n                              color_label = input$covariate, \n                              K = input$K, error_bars = FALSE)\n    return(plt)\n  })\n  \n  # Choose a subset of samples to display trajectory for\n  idxBigger <- reactive({\n    idx <- floor(seq(1, length(tau_df()$tau), length.out = input$nCenters))\n    return(NULL) #rownames(tau_df())[idx]\n  })\n  \n  # Plot tau estimates vs rankof tau\n  plot_rank_tau <- reactive({\n    req(input$covariate %in% colnames(sampleData()))\n    plt <- plot_buds_1D(tau_df(), covariate = NULL,\n                        color = sample_covariate(), \n                        color_label = input$covariate, \n                        idxBigger = idxBigger()) \n    return(plt)\n  })\n  \n  # Plot tau against chosen covariate\n  plot_data_vs_tau <- reactive({\n    req(input$covariate %in% colnames(sampleData()))\n    plt <- plot_buds_1D(tau_df(), covariate = sample_covariate(),\n                        color = sample_covariate(), \n                        color_label = input$covariate, \n                        idxBigger = idxBigger()) \n    return(plt)\n  })\n  \n  Y2D <- reactive({\n    return(low_dim_vis(D0(), method = input$method, dims = 2))\n  })\n  \n  Y3D <- reactive({\n    return(low_dim_vis(D0(), method = input$method, dims = 3))\n  })\n  \n  bootD <- reactive({\n    req(budsFit())\n    fitParams <- rstan::extract(budsFit())\n    nDraws <- nrow(fitParams$tau)\n    B <- min(B, nDraws) \n    return(get_D_copies(D(), budsFit(), B)) \n  })\n  \n  distatis_res <- reactive({\n    res <- run_distatis(D(), bootD(), budsFit(), tau_df()$tau, \n                        covariate = sample_covariate())\n    return(res)\n  })\n  \n  \n  ####################### PLOTTING #########################\n  \n  # Plot 2D visualization of the data and trajectories\n  plot2D <- reactive({\n    req(input$covariate %in% colnames(sampleData()))\n    plt <- plot_buds_trajectory(Y2D(), budsFit(),\n                         sample_data = sampleData(), \n                         covariate_name = input$covariate, \n                         path_col = \"#2171B5\", \n                         nPaths = input$nPaths, \n                         nCenters = input$nCenters)\n    return(plt)\n  })\n  \n  # Plot 3D visualization of the data and trajectory on idxBigger\n  plot3D <- reactive({\n    req(input$covariate %in% colnames(sampleData()))\n    plt <- plot_buds_trajectory(Y3D(), budsFit(),\n                                sample_data = sampleData(), \n                                covariate_name = input$covariate, \n                                path_col = \"#2171B5\", \n                                nPaths = input$nPaths, \n                                nCenters = input$nCenters)\n    return(plt)\n  })\n  \n  plot_X <- reactive({\n    plt <- plot_ordered_matrix(X(), tau_df()$tau, log_trans = TRUE,\n                               keep_fatures = NULL, \n                               nfeatures = max(500, 2*ncol(X())),\n                               byMean = TRUE, window = NULL)\n    return(plt)\n  })\n  \n  plot_density <- reactive({\n    distatis_df <- distatis_res()$partial\n    consensus_df <- distatis_res()$consensus\n    plt <- plot_distatis(distatis_df, consensus_df, \n                         color_label = input$covariate) \n    return(plt)\n  })\n  \n  plot_contours <- reactive({\n    distatis_df <- distatis_res()$partial\n    consensus_df <- distatis_res()$consensus\n    plt <- plot_point_contours(distatis_df, consensus_df, \n                               idx_list = chosen_samples(), \n                               color_label = input$covariate)  \n    return(plt)\n  })\n  \n  plot_features <- reactive({\n    plt <- plot_features_curves(X(), tau_df()$tau, \n                                feat_idx = chosen_feats(), \n                                log_transform = TRUE)\n    return(plt)\n  })\n  \n  \n  output$plot_features <- renderPlot({\n    plot_features()\n  })  \n  \n  output$plot_density <- renderPlot({\n    plot_density()\n  })  \n  \n  output$plot_contours <- renderPlot({\n    plot_contours()\n  })  \n  \n  output$plot_kNN_dist <- renderPlot({\n    plot_kNN_dist()\n  })  \n  \n  output$plot_rank_tau <- renderPlot({\n    plot_rank_tau()\n  })\n  \n  output$plot_data_vs_tau <- renderPlot({\n    plot_data_vs_tau()\n  })\n  \n  output$plot2D <- renderPlot({\n    plot2D()\n  })\n  \n  output$plot3D <- renderPlotly({\n    plot3D()\n  })\n  \n  output$plot_X <- renderPlot({\n    plot_X()\n  })  \n  \n  output$down_rank_tau <- downloadHandler(\n    filename = \"rank_tau.png\",\n    content = function(file) {\n      ggsave(file, plot_rank_tau())\n    }\n  )\n  \n  output$down_data_tau <- downloadHandler(\n    filename = \"tau_vs_covariate.png\",\n    content = function(file) {\n      ggsave(file, plot_data_vs_tau())\n    }\n  )\n  \n  output$down_plot_X <- downloadHandler(\n    filename = \"heatmap.png\",\n    content = function(file) {\n      ggsave(file, plot_X())\n    }\n  )\n  \n  output$down_buds2D <- downloadHandler(\n    filename = \"trajectory2D.png\",\n    content = function(file) {\n      ggsave(file, plot2D())\n    }\n  )\n  \n  output$down_density <- downloadHandler(\n    filename = \"data_density.png\",\n    content = function(file) {\n      ggsave(file, plot_density())\n    }\n  )\n  \n  output$down_contours <- downloadHandler(\n    filename = \"contours.png\",\n    content = function(file) {\n      ggsave(file, plot_contours())\n    }\n  )\n  \n  output$down_features <- downloadHandler(\n    filename = \"features.png\",\n    content = function(file) {\n      ggsave(file, plot_features())\n    }\n  )\n  \n  \n})\n\n\n\n",
    "created" : 1493015180403.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3999861706",
    "id" : "BC03E210",
    "lastKnownWriteTime" : 1493015429,
    "last_content_update" : 1493015429550,
    "path" : "~/MEGA/BIOSTATS GROUP/Projects/visBUDS/visTrajectory/R/server.R",
    "project_path" : "R/server.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}